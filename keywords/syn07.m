function syn07()

global MODULES STACK XXX META;

% FAST DYNAMICS 
append_module(MODULES.pz_synapse.mdl(...
                struct('fit_fields', {{'poles', 'zeros', 'gain', 'delayms', ...
                                       'prephi', 'postphi', 'y_offset'}}, ...
                       'poles', [-100], ...
                       'zeros', [], ...
                       'gain', 100, ...
                       'prefn', @polyval, ...
                       'prephi', [0 1 0], ...
                       'postfn', @polyval, ...
                       'postphi', [0 1 0], ...
                       'input', 'stim', ...
                       'output', 'stim1')));                                      
                 
append_module(MODULES.sum_fields.mdl(struct('inputs', {{'stim1'}})));
fit04a(); pop_module(); pop_module();
STACK{end}{1} = rmfield(STACK{end}{1}, 'fit_fields');

% SLOW DYNAMICS
append_module(MODULES.pz_synapse.mdl(...
                struct('fit_fields', {{'poles', 'zeros', 'gain', 'delayms', ...
                                       'y_offset'}}, ...
                       'poles', [-2], ...
                       'zeros', [], ...
                       'gain', -10, ...
                       'prefn', @polyval, ... % Polyval [1 0] is identity
                       'prephi', [0 1 0], ...
                       'postfn', @polyval, ...
                       'postphi', [0 1 0], ...
                       'input', 'stim', ...
                       'output', 'stim2')));     

append_module(MODULES.sum_fields.mdl(struct('inputs', {{'stim1', 'stim2'}})));
fit04a(); pop_module(); pop_module();
STACK{end}{1} = rmfield(STACK{end}{1}, 'fit_fields');

% Another Dynamics Thing
append_module(MODULES.pz_synapse.mdl(...
                struct('fit_fields', {{'poles', 'zeros', 'gain', 'delayms', ...
                                       'prephi', 'postphi', 'y_offset'}}, ...
                       'poles', [-50], ...
                       'zeros', [], ...
                       'gain', 10, ...
                       'prefn', @polyval, ...
                       'prephi', [1 0 0], ...
                       'postfn', @polyval, ...
                       'postphi', [0 1 0], ...
                       'input', 'stim', ...
                       'output', 'stim3'))); 

append_module(MODULES.sum_fields.mdl(struct('inputs', {{'stim1', 'stim2', 'stim3'}})));
fit04a(); pop_module();
STACK{end-1}{1} = rmfield(STACK{end-1}{1}, 'fit_fields');

siglog();
fit04a(); 

% Now go through and re-fit everything.
[~, mod_idxs] = find_modules(STACK, 'pz_synapse');

for jj = 1:length(mod_idxs)
    idx = mod_idxs{jj};
    STACK{idx}{1}.fit_fields = {'poles', 'zeros', 'gain', 'delayms', ...
                                'prephi', 'postphi'};
end

calc_xxx(2);
[a,b,c,d] = fit_scaat('InitStepSize', 100.0, ...
                      'StopAtAbsScoreDelta', 10^-4);


end