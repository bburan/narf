* MILESTONE 0 : Easy variation of model parameter
  Get scores vs sampling rate for 250Hz, 200Hz 150Hz, 100Hz, 50Hz
* MILESTONE 1 : More difficult variation of model parameters
  Predictive quality scores, boosting performance as time progresses, total computation time for 1 data set and multiple models:
  1. Stephen's FIR coefs or default FIR coefs (Different modules)
  2. Gammatone bank or elliptical bank (Different modules) 
  3. Conv = {mean, max, min}           (Same module, different parameters)
  4. post_conv = {sqrt, log(x+10^-3)   (Same module, different parameters)
* MILESTONE 2 : Model variation across multiple files!
  Probably will need to run all night.

* TOP TODO LIST
  3. Add david's code for model fitting
  4. Use test and training data sets properly.
  5. Reduce all experimental dimensions to 2. Time, and channel. Input channels are the enumerated combination of speaker #, band #, light intensity, or whatever. 
     First dimension is always time. 
     Second dimension is some combination of input dimensions. 
  6. Volterra model
  7. narf_gui.m Remove Load Above Files button and use callback to initialize model structure
  8. Write a crash course guide on using NARF
  9. Stop using ALL the stimfiles during optimization, and just use the TRAINING_SET like I should be using
  10. Remember to invalidate data BELOW the present point on a table-edit callback... and to Update the gui to reflect this!
  11. Write a programmatic demo which steps through values in a particular model class and saves some result
  12. Separate FIR filters with inhibitory only and excitory only behaviors

* CLEANING/REFACTORING TODOs:
  - In retrospect, XXX should contain the 'plot_gui' part, since it depends on the XXX pretty substantially.
  - It's not quite right to have the 'replot' command be part of the the 'plot_popup fn callback'. Needs to be re-thought.
  - Right now, you can only instantiate a single GUI at a time. If you close this GUI, it cannot be recreated from the STACK. This is bad behavior and should be fixed by putting GUI handles in their own separate structure, or by providing a function that will clear all the GH's from the stack.
  - Rename things to be more clear. Preprocessing inputs should be called 'channels', to make them distinct from later FIR 'filters' 
  -   Rename XXX into CHAIN, since it's a chain of data? or ARGS, since it's the arguments to each function in the stack?
  - Avoid cla's in user-space plotting functions
  - Rename the terrible 'generic_model_data_table_update.m' function
  - Provide a more concise way of finding user-space guis in the call tree above (Right now there's too much copy & paste in user-side plot functions!)
  - Add a few useful functions to generic_methods
  - Automatically load bandpass information from the arg_params struct passed to the bandpass filter fn (Look at exptparams.TrialObject.ReferenceHandle object?)
  - Go through the TODO's in existing files
  - Ensure that no closures of data are being done by methods. Methods should accept the module object as their first argument, not close over anything.
  - make anything named 'update_' into a function used purely for its side effects

* HIGH LEVEL THINGS TO BE THOUGHT ABOUT:
  How can optimization routines be...?
  1. Allowed to work on the STACK and XXX as they desire
  2. Able to use the narf_modelpane gui 
  3. Able to do their own plots
  4. Modular, with pluggable sampling methods, objective functions, termination conditions.
  5. Still scriptable and batch executable

* OPTIMIZATION TODOs
  Write a 'scaled boosting' algorithm, which takes a step in the direction proportional to the improvement in performance that it yields? (Good with MSE)
  Write a 'conjugate boosting' algorithm, which is normal boosting but takes steps in a single direction until the objective function stops improving.
  Write a jack-knifing function which can work with any of the optimization modules

* ADDITIONAL MODULES: 
  - SMOOTHING of the RESPAVG signal with gaussian convolution
  - An option for taking correlation in a different method than sheer concatenation could be interesting
  - Add a button to "save analysis", connecting the stimfile train/test sets, model structure and params, optimization method, and GIT code hash number all together in a single, savable structure.
  - Add a button or textbox to "load analysis" settings that have already been found, so that saved data from a batch can be quickly browsed.
  - Add error handling (catch/throw) around EVERY CALL to a user defined function
  - Normalize the binning as a rate?
  - Handle NaN's better...right now they cause problems! (Use nanmean())
  - Add a GUI button to load_stim_from_baphy to play the stimulus as a sound!

* STEPHEN'S CODE TO REVIEW
  - [X] cellxcmaster('por012c-b1',238); % intelligently performs batch analysis 238 on cellid 'por012c-b1'
  - [ ] After the execution of the above, 'params' contains the details of how the analysis was performed.
  - [ ] params.resploadparms{1} is a way of getting
  - [ ] params.respfiles gives a list of the files being used during the analysis
  - [ ] dbget('sBatch', 238); % Returns details about which experiment is actually being performed
  - [ ] [cellfiledata, times, ...] = cellfiletimes()      % Note that times contains important info about the training set/test set split, such as the fitting method used?
  - [ ] xcloadfiles      % Performs analysis on multiple files, queries from the database
  - [X] xcloadstimresp   % A cleaner, gentler version of the previous file that is probably what I should base my analysis off of. 
  - [X] meska_pca()                              Used for doing the spike sorting, the front end. 
  - [ ] RemoteAnalysis/boost_online.m
  - [ ] Utilities/cacheevpspikes.m
  - [X] cellDB/dbchooserawfile.m
  - [X] Config/lbhb/BaphyMainGuiItems.m  has some hard-coded defaults for the GUI

* LUXURY, UNESSENTIAL TODO ITEMS 
  - [ ] Make raw/stimulus response have two dropdowns to pick out colorbar thresholds for easier visualization
  - [ ] Add a filter that processess phase information from a stimulus, not just the magnitude
  - [ ] Write a function which swaps out the STACK into the BACKGROUND so you can 'hold' a model as a reference and play around with other settings, and see the results graphically by switching back and forth.
  - [ ] Write dbchoosecellfiles()
  - [ ] Use inter_curve_v3 to interactively make FIR things
  - [ ] Try adding color to histograms and scatter plots
  - [ ] Try improving contrast of various intensity plots
  - [ ] Add BIC or AIC to model comparison data
  - [ ] Optimization report card and status information logged
  - [ ] Rank model fits and plot correlations
