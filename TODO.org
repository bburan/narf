* NOTES FOR STEPHEN
  You'll that load_stim_from_baphy flattens the inputs...this is bad and I am going to correct it soon. 
  Let's just call the default stimulus and responses "stim" and "resp" and not overthink this with 'current_stim' or 'current_resp'. If there is a particularly important variation that needs to be made distinct, you can call it 'raw_resp' or 'ds_resp' for raw or downsampled responses, respectively.  
  If you wish, you can also define an alias for a signal, so that 'resp' actually points to the 'raw_resp' signal...?
  EMAIL: It's cheating to train the neuron using the envelope that used to generate the speech modulated noise, because the actual data after random noise was added will not have the same envelope! You must reconstruct the envelope from the wave file that you actually presented to the animal in order to be honest, or at the very least prove that the original envelope can be reconstructed essentially perfectly.

* TOP TODO LIST
  1. [X] Refactor the FIR FILTER model to have an 'inputs' and 'outputs' field that it works on.
  2. [X] Remove the 'load' and 'save' buttons from narf_gui
  3. [X] Refactor the FIR FILTER model to use a separate SUMMING module that works across the vector inputs
  4. [X] Add a module which thresholds FIR output exponentially
  5. [X] Make all modules have 'input', 'output', and 'time' fields, which default to 'Current_stim', 'current_time', etc
  6. [X] Make a module which sums across a vector to produce a scalar
  7. [ ] Make a module which can pick out a particular dimension from a vector and give it a name as a signal?
  8. [X] Add a module which thresholds FIR output sigmoidally
  9. [ ] Add a module which thresholds FIR output linearly
  10. [ ] Add a module which does thresholding of the FIR output so that it never goes negative
  11. [ ] Add a function to compute 'var' for each input channel, across every stimulus. then SCALE FIR coefficients in that row by 1/var right before the filtering. Then FIR coefficients will be relative?
  12. [ ] Rearrange all vectors so that the 1st dimension is always time, the 2nd dimension is always stimulus channel, and the 3rd dimension is always a model internal channel. 
	  Reduce all experimental dimensions to 2. Time, and channel. Input channels are the enumerated combination of speaker #, band #, light intensity, or whatever. 
	  First dimension is always time.
	  Second dimension is some combination of input dimensions. 
	  Reduce all model dimensions to be in the 3rd position. 
  13. [ ] Put back in Volterra model
  14. [ ] Write a crash course guide on using NARF
  15. [ ] Remember to invalidate data BELOW the present point on a table-edit callback... and to update the gui to reflect this!
  16. [ ] Make a function to replicate the true SPN envelope filter that Stephen does
  17. [ ] Make logging work for the GUI by including it in narf_modelpane?
  18. [ ] Do a check to see how close the re-interpolated value of the envelope is, compared with what Stephen used to generate it.

* Loadstimfrom baphy has the chancount
  Passing a zero to it should give the true number of envelopes
  I could also try passing it a 2 and see what happens, since if you give loadstimfrombaphy any value OTHER THAN ONE, it will give you the envelopes used to generate the stimuli
  
* CLEANING/REFACTORING TODOs:
  - Look for obvious repetition and make some more functions in util/
  - In retrospect, XXX should probably contain the 'plot_gui' part, since it depends on the XXX pretty substantially.
  - It's not quite right to have the 'replot' command be part of the the 'plot_popup fn callback'. Needs to be re-thought.
  - Right now, you can only instantiate a single GUI at a time. Could this be avoided and the design made more general?
  - Rename things to be more clear. Any sort of input dimension is a 'channel', to abstract the notion of stimulus dimension?
  - Avoid cla's in user-space plotting functions
  - Provide a more concise way of finding user-space guis in the call tree above (Right now there's too much copy & paste in user-side plot functions!)
  - Go through the TODO's in existing files
  - Ensure that no closures of data are being done by methods. Methods should accept the module object as their first argument, not close over anything.
  - make anything named 'update_' into a function used purely for its side effects
  - Make all vectors into column vectors so I don't have to continually do the transpose

* HIGH LEVEL THINGS TO BE THOUGHT ABOUT:
  How can optimization routines be...?
  1. Allowed to work on the STACK and XXX as they desire
  2. Able to use the narf_modelpane gui 
  3. Able to do their own plots
  4. Modular, with pluggable sampling methods, objective functions, termination conditions.
  5. Still scriptable and batch executable

* OPTIMIZATION TODOs
  Write a 'scaled boosting' algorithm, which takes a step in the direction inversely proportional to power of that channel (reweighting the channels by their power, essentially)
  Write a 'conjugate boosting' algorithm, which is normal boosting but takes steps in a single direction until the objective function stops improving.
  Write several different performance metric functions: MSE and a point-process fit
  Write a jack-knifing function which can work with any of the optimization modules

* ADDITIONAL MODULES:
  - Single channel gammatone filter (for speed)
  - SMOOTHING of the RESPAVG signal with gaussian convolution
  - An option for taking correlation in a different method than sheer concatenation could be interesting
  - Add a button to "save analysis", connecting the stimfile train/test sets, model structure and params, optimization method, and GIT code hash number all together in a single, savable structure.
  - Add a button or textbox to "load analysis" settings that have already been found, so that saved data from a batch can be quickly browsed.
  - Add error handling (catch/throw) around EVERY CALL to a user defined function
  - Handle NaN's better...right now they can cause problems! (Use nanmean())
  - Add a GUI button to load_stim_from_baphy to play the stimulus as a sound?

* STEPHEN'S CODE TO REVIEW
  - [X] cellxcmaster('por012c-b1',238); % intelligently performs batch analysis 238 on cellid 'por012c-b1'
  - [ ] After the execution of the above, 'params' contains the details of how the analysis was performed.
  - [ ] params.resploadparms{1} is a way of getting
  - [ ] params.respfiles gives a list of the files being used during the analysis
  - [ ] dbget('sBatch', 238); % Returns details about which experiment is actually being performed
  - [ ] [cellfiledata, times, ...] = cellfiletimes()      % Note that times contains important info about the training set/test set split, such as the fitting method used?
  - [ ] xcloadfiles      % Performs analysis on multiple files, queries from the database
  - [X] xcloadstimresp   % A cleaner, gentler version of the previous file that is probably what I should base my analysis off of. 
  - [X] meska_pca()                              Used for doing the spike sorting, the front end. 
  - [ ] RemoteAnalysis/boost_online.m
  - [ ] Utilities/cacheevpspikes.m
  - [X] cellDB/dbchooserawfile.m
  - [X] Config/lbhb/BaphyMainGuiItems.m  has some hard-coded defaults for the GUI

* LUXURY, UNESSENTIAL TODO ITEMS 
  - [ ] Make raw/stimulus response have two dropdowns to pick out colorbar thresholds for easier visualization
  - [ ] Add a filter that processess phase information from a stimulus, not just the magnitude
  - [ ] Write a function which swaps out the STACK into the BACKGROUND so you can 'hold' a model as a reference and play around with other settings, and see the results graphically by switching back and forth.
  - [ ] Write dbchoosecellfiles()
  - [ ] Use inter_curve_v3 to interactively make FIR things
  - [ ] Try adding color to histograms and scatter plots
  - [ ] Try improving contrast of various intensity plots
  - [ ] Add BIC or AIC to model comparison data
  - [ ] Optimization report card and status information logged
  - [ ] Rank model fits and plot correlations
