* NEW FEATURES
  1. [X] Refactor plot_saved_analysis () so that anybody can select cached data quickly. 
  2. [X] Scatter plot of training score / test score data for every cellid. (Am I overfitting? Is there a peak for some fitters?)
  3. [X] Function to record the GIT commit when the model was trained added to summarize_model()
  4. [ ] Distribute computation using headless matlab instances and shell scripts
  5. [ ] Change path of models to be in /auto/data by default?
  6. [ ] FITTER: Shrinkage Fitter	 
  7. [ ] FITTER: lsqnonlin()
  8. [ ] FITTER: nlinfit() (maybe we don't know the stim as well as we think)
  9. [ ] FITTER: Boosting() 
  10. [ ] FITTER: Simulated annealing
  11. [ ] FITTER: FIT FIR BEFORE THE NL IS ATTACHED
  12. [ ] FITTER: Conjugate boosting algorithm, which takes steps in a single direction until the objective function stops improving.
  13. [ ] Replace all the 'true' and 'false' arguments with textual flags and vargin that are more descriptive
  14. [ ] Try training a model across two data sets before fitting it
  15. [ ] SHELL SCRIPT: Start up 6 instances of headless matlab, and start them on an analysis
  16. [ ] Function to 'set_module_field' (finds module, sets field, so you can mess with things later in scripts)
  17. [ ] FITTER: Import fitting routines from STRFlab
  18. [ ] PERF METRIC: inter_spike_intervals + bayesian_likelihood()
  19. [ ] MODULE: Build a non-cheating model which extracts envelopes directly from the WAV files using an elliptic or gammatone prefilter
  20. [ ] MODULE: Make a faster IIR filter with asymmetric response properties 
  21. [ ] MODULE: Make Concat Second Order Terms work for any higher order nchoosek type stuff
  22. [ ] MODULE: Standardized single/multi channel gammatone filter
  23. [ ] MODULE: Standardized single/multi channel elliptic filter 
  24. [ ] MODULE FN: Provide functions to cover the input space logarithmically with filters
  25. [ ] MODULE FN: Provide an auto-init for the filters which cover the input space, train filters on that, and picks the channel with the most power. It does this once wide, then once narrow.
  26. [ ] MODULE: Add a module which can pick out a particular dimension from a vector and give it a name as a signal
  27. [ ] Roll model summary caches and select_summaries into Stephen's BAPHY, since in the end all I did was reinvent yet another crappy RDBMS

* END USER CONVENIENCES
  1. [ ] Why isn't auto recalc the default?
  2. [ ] Make logging work for the GUI by including the log space in narf_modelpane?
  3. [ ] IRRITATION: Why doesn't 'nonlinearity' module default to a sigmoid with reasonable parameters?
  4. [ ] IRRITATION: Why doesn't it show the model save filename so I can see which file I just loaded if I forgot?
  5. [ ] IRRITATION: Why doesn't every plotted signal have a legend?
  6. [ ] IRRITATION: Why don't the X (or at least the Y) axes have scales?
  7. [ ] IRRITATION: Why isn't there an 'undo' function?
  8. [ ] IRRITATION: Why can't I resize windows?
  9. [ ] IRRITATION: Why isn't there progress in the GUI when fitting?
  10. [ ] IRRITATION: Why are the editable text boxes so damn small?
  11. [ ] IRRITATION: Why can't I edit a module type in the middle of the stack via the GUI?
  12. [ ] Write a crash course guide on using NARF
  13. [ ] Remember to invalidate data BELOW the present point on a table-edit callback... and to update the gui to reflect this!

* BUG FIXES AND CLEANING
  1) [X] Paths have become a bit messy: grep for NARF_PATH and correct (also: replace with filesep when possible)
  2) [X] Cleaner way of building models in a script than accessing by index number?
  3) [X] Look for obvious repetition and make some more functions in util/
  4) [ ] Many repeated blocks of code have evolved and need to be destroyed.
  5) [ ] Names probably could use some rethinking as well, especially defaults (like using 'stim' default even in the fitting algorithms, for example)
  6) [ ] Add error handling (catch/throw) around EVERY CALL to a user defined function
  7) [ ] In retrospect, 'plot_gui' stuff probably shouldn't be stored in the XXX or STACK structures...should it be in a 3rd structure?
  8) [ ] Ensure that no closures of data are being done by methods. Methods should accept the module object as their first argument, not close over anything.
  9) [ ] It's not quite right to have the 'replot' command be part of the the 'plot_popup fn callback'. Needs to be re-thought.
  10) [ ] Go through the TODO's, FIXME's, etc in existing files
  11) [ ] make anything named 'do_' into a method for use with modules?
  12) [ ] make anything named 'update_' into a function used purely for its side effects?
  13) [ ] Delete the GUI objects whenever you 'apply' since they may need to be recreated?

* DESIGN QUESTIONS TO BRAINSTORM:
  1. [X] How can sane initial conditions for optimization be automatically arrived at without extra script-writing?
	 Auto-initialization of model params is done by allowing modules to update their design based on the data by calling the optional 'auto_init' method.
	 Arg 1 is the STACK, not including the model itself. 
	 Arg 2 is the XXX data input, not including the model's output data itself. 
  2. [X] How can jack-knifing be integrated in to the optimization routine to prevent over-fitting?
	 Split the big long RESP and STIM vectors in fit_with_lsqcurvefit into 10 chunks
	 Take groups of 9 of those chunks, run lsqcurvefit, then test on remaining chunk
	 Take weighted average of all jackknifed solutions, weighting each by inverse variance? Or just mean, if we assume they all have same variance?
	 Return weighted average.
  3. [X] How should optimization constraints be incorporated in the design?
	 Probably the easiest way is to define a structure which may be used by pack/unpack to create upper and lower bounds, which are then passed to the optimization routine
	 opt_hints = struct('alpha', [-1 3], 'beta', [0 inf]); % Constrain alpha from -1 to 3 and beta from 0 to infinity. 
  4. [X] How should models be automatically generated in a quick and scriptable way?
	 See analysis/test_likely_candidates.m
  5. [X] How can design internal degrees of freedom be detected and corrected during optimization?
	 (Probably they cannot!)
  6. [X] There needs to be a place to store information about a whole model. 
	 For example, 'model name' and 'fitter' are two examples of fields that don't really belong in a module.
  7. [X] There is no best fitting routine, only fitting routines which work better for different cells. Allow them all a chance to run by making them module parameters.
  8. [ ] Can jackknifing or the equivalent be applied to ANY fitting routine as a higher level function
	 If we only have one data file, how can we hold out some fraction of the stimuli so that we can do training/test on a single data file?
  9. [ ] Right now, it's very convenient to be able to have the 'fitter' and 'score' quantity to be in modules
	 I can plug in all the module groups and let the fitter run. I can compare different fit routines automatically.
	 However, a fitter is not really part of a module, it's part of a whole model.
	 Therefore, in the future, the fitter and score quantity should be stored in the model META structure.
	 On the other hand, I need to justify this: Why should this be done instead of leaving it in the STACK? What we have right now works and is convenient.
	 (Because we may want to try multiple fit routines, and pick the model with the best training score?)
	 (Because I expect that model specific fitters are necessary? That isn't a reason!)
  10. [ ] Right now, you can only instantiate a single GUI at a time. Could this be avoided and the design made more general?	  
  11. [ ] It is awkward in non-parametric non-linearity module to recalc the phi every time you need it. Some place to cache it would be good. 
* LUXURY, UNESSENTIAL TODO ITEMS 
  - [ ] Make it so baphy can be run _twice_, so that raw_stim_fs can be two different values (load envelope and wav data simultaneously)
  - [ ] Make gui plot functions response have two dropdowns to pick out colorbar thresholds for easier visualization?
  - [ ] MODULE: Add a filter that processess phase information from a stimulus, not just the magnitude
  - [ ] Write a function which swaps out the STACK into the BACKGROUND so you can 'hold' a model as a reference and play around with other settings, and see the results graphically by switching back and forth.
  - [ ] Write dbchoosecellfiles() and connect it to NARF_MODELPANE
  - [ ] Try adding informative color to histograms and scatter plots
  - [ ] Try improving contrast of various intensity plots
  - [ ] Put a Button on the performance metric that launches an external figure if more plot space is needed.
  - [ ] Add a GUI button to load_stim_from_baphy to play the stimulus as a sound
