* Discussion with Stephen

** Solved problem: How to initialize complex models in complex ways
   No other way around it; defining a new keyword function is the only truly flexible way to do this. 
   Some complex keywords can even add and initialize a model in the same step.
   Our never-ending task is to isolate the functionality of each keyword in the most logical and recombinable manner.
   But that's not a hard problem, since we can always refactor functionality we find ourselves cut-and-pasting.

** Unsolved problem: How should we accomodate our need to be able to study a model
   Although right now we are just looking at FIR and NPNL and how they vary when trained on one/multiple files.
   We can't just train five models, because we want the REST of the model to use all the same data.
   We can anticipate that we will be doing this all/individual separation of data for almost every computational module.
   
*** Option 1: Use wiring to connect many simple modules which use inputs that are all- or per- file
    Pros: 
    + Using 'wiring' to solve the problem can be done algorithmically, and doesn't change the modules.
    + A module which 'splits' a signal by respfile channel 
    + No change to existing modules
    Cons:
    - Makes comparison graphing more difficult
    - Confuses the idea of a 'model structure' with the 'experimental structure' 
    - Increased number of modules
    - Tree navigation required to some extent.
    - Looks like a bookkeeping nightmare having to name all those signals programmatically

*** Option 2: Make the all-/per- file analysis local to each module.
    Pros:
    + Fewer modules are created, improving fitting/plotting speed
    + The all-/per-file comparison is so much easier because the data is local
    + No changes to gui code
    + You can graph all or per simultaneously
    Cons:
    - Changes to EVERY SINGLE module that wants to implement this.      
    - Data structures become more complex

*** Discussion
    It has to be Option 2: change every single module to accomodate this all/per file experimental thing. 
    This is the only option because it would be very bad to confuse the experimental structure with the model structure. 
    Our experiment may bei asking how a module's parameters look in various behavior states, but that's not the same thing as having branches in a model.
    We also have a real need to train part of the model on everything, and another part only on specific respfiles.
    Keeping track of if we are looking at the Inhibition or Excitation FIR filter when you have 8 Respfiles would be too confusing...that's 16 FIR filters, plus splitters/joiners!

*** Proposed Solution:
    What we really need is a uniform abstraction that can be applied to any module.

    1. Manage module fields for both all-file or per-file cases
    2. Manage module plotting for all- or per- cases
    3. Align training/test set pairs when using a particular parameter set grouping
    4. Remains customizable in the event that we need to create different groupings (say, active1 vs active2 vs passive behaviors) 

    The way to achieve this uniform abstraction is to change the functional interface of each module:

    1. Every module function interface now accepts:
       - the module parameter set to use
       - the respfiles/data to act upon
       - previous STACK
       - previous XXX

    2. Modules now have an optional flag
       - When true, arguments to functions are given
       - The respfile cell array is specified by some 'experimental respfile selector function'

    3. The default function of a modules no longer works on ALL data, but only on the respfile argument.

    4. Plot functions of modules no longer works on ALL data, but only on the respfile cell array argument.
       Modules no longer plot directly to their output
       Instead, they accept an argument of where to plot, 
       They also receive the module fields to use when plotting

* Function in META
  - Modules get a function
    That function determines how respfiles and parameters are hashed out to them
  - Extra 'for' loop which does per or all- file parameter management.

* SOLUTION FOR THESE TYPES OF PROBLEMS:
  However, for fitting, the situation is more complex:
  - [ ] Sparsity could easily be computed from the getter's return value...
  - [ ] ...but how to combine multiple sparsity penalties?
  - [ ] ...are all coefs now fit simultaneously?
  - [ ] ...Does pack/unpack need to now call via the getter/setter?
  - [ ] ...Or do we just keep the coefs as a matrix, and use the getter/setter to access subsections of it?
  - [ ] ...Averaging the sparsity values seems easiest

* KEYWORDS
   - [ ] Init FIR to rcorr
   - [ ] Init FIR to zero
   - [ ] Init FIR to some prior

* Architectual Improvements
  1. [ ] Make the fits run faster by removing then re-adding the 'test_set' data after fitting process
  2. [ ] Sparsity+ smoothness penaltiy is now part of the fitter, not the model
	 Some models have multiple FIRs, and that becomes too much logic to put in a module
  3. [ ] Make a 2D NPNL heightmap nonlinearity
	 Input X is the exitation
	 Input Y is the inhibition
	 Returns Z, the height of the map
	 Data will probably NOT be scattered uniformly around the map.
  4. [ ] Bayesian Performance Metrics
	 Why: Noise model entropy is a metric of performance. (If best-fit noise distribution has low entropy, we know _more_ about the system) 
	 Why: Likelihood is probably a better metric than MSE since large outliers may not affect it as much?

* SMALL CORRECTIONS AUDIT LIST
  1. [ ] Smooth scatter plots do testing / training simultaneously
  1. [-] Clean up distribution of code before a modelfit
	 - [ ] Function which distributes GIT to workers before enqueing models
	 - [X] Checks local repository is clean
  2. [-] NARF Browser Improvements
         - [X] Scatter plot test/train button
         - [ ] Heat Map current display button	
  3. [ ] Repair NarfModelpane
         - [ ] Displays model name, training set, test set, and other important info at bottom of window
         - [ ] Provide a dropdown to pick more fitters
	 - [ ] Standardized colors for all module plots
  4. [ ] Replace all the 'true' and 'false' arguments with textual flags and varargin that are more descriptive
  5. [ ] IRRITATION: Why doesn't it show the model save filename so I can see which file I just loaded if I forgot?
  6. [ ] IRRITATION: Why doesn't every plotted signal have a legend?
  7. [ ] IRRITATION: Why don't the X (or at least the Y) axes have scales?
  8. [ ] IRRITATION: Why are the editable text boxes so damn small?
  9. [ ] Is this line fine with the closures? m.plot_fns{1}.fn = @(stack, xxx) do_plot_channel_vs_time(stack, xxx, m.time, m.output);
  10. [ ] Remember to invalidate data BELOW the present point on a table-edit callback... and to update the gui to reflect this!
  11. [ ] Make sure that fitters return specific codes indicating how they terminated
  12. [ ] Pull out repeated code blocks in the fitters (because they are all pretty much the same damn thing over and over again)
  13. [ ] Antialiasing problem when saving images
  14. [ ] MODULE: Standardized single/multi channel gammatone filter
  15. [ ] MODULE: Standardized single/multi channel elliptic filter 
  16. [ ] FN: 'set_module_field' (finds module, sets field, so you can mess with things more easily in scripts)
  17. [ ] Make Concat Second Order Terms work for any higher order nchoosek type stuff
  18. [ ] FN: Cover an input space logarithmically with filters
  19. [ ] Add error handling (catch/throw) around EVERY CALL to a user defined function, trigger popup?
  20. [ ] Ensure that no closures of data are being done by methods. Methods should accept the module object as their first argument, not close over anything.
  21. [ ] It's not quite right to have the 'replot' command be part of the the 'plot_popup fn callback'. Needs to be re-thought
  22. [ ] MODULE: Add a module which can pick out a particular dimension from a vector and give it a name as a signal
  23. [ ] MODULE: Build a non-cheating model which extracts envelopes directly from the WAV files using an elliptic or gammatone prefilter
  24. [ ] IRRITATION: Why can't I resize windows?
  25. [ ] Repair histogram plots when doing scatter stuff so you can see densities better relative to 
  26. [ ] Grep for TODO's, FIXME's, etc in existing files and add them to this list

* ENQUEUING MANAGER PROGRAM:
  1. Should Batching should work like this?
     + Batch model scripts can share structure. right now all the batches have pretty much identical scripts!
     + When work is enqueued, it goes into the NARF table, which has a 'complete?' flag
     + Any number of PCs query the DB, try to get 'incomplete' flagged models. DB is atomic, handles conflicts and negates need for server.
     + They compute those models, then return values.
     + If desired, a local 'manager' on each PC can watch processes, handle timeouts, etc
     + Negates need for SSH credentials everywhere, too.
  2. Or like this?
     + Do an SQL query to NarfResults to see what exists
     + Display models to be trained, already trained
     + Allow deletions of existing models
     + Display keyword selectors for models at the top
     + Display keyword selectors for fitters at the top
     + Display selectors for which cellids can be trained
     + Checkbox management so that only certain models can be enqueued


* SAFETY VERIFICATION PROGRAM:
  1. Create a test/ directory with many test functions in it
     Each test function:
     - creates a default XXX{1}
     - Puts a single module on the stack
     - Recomputes XXX(1)
     - Checks output vs predetermined values
  2. Check that all modules work independently as expected
  3. Checks that DB and modelfiles still sync up

* THE GREAT NAME REPLACING PROPOSAL
  1. [ ] XXX -> 
  2. [ ] STACK -> 
  3. [ ] STACK.gh -> GUI
  4. [ ] META -> ModelInfo
  5. [ ] FITTER?
  6. [ ] MODULES
  8. [ ] Make a list of every function used purely for side effects, and rename it with a ! at the end
  9. [ ] "training set" -> "estimation set"
  10. [ ] "test set" -> "Validation set"
  11. [ ] Name convention of STACK vs stack, XXX vs xxx and the difficulty in understanding which one we are looking at! 
	  Lots of hidden assumptions here which are a problem. Plot modules have access to AFTER data, too.

* TECHNICALLY HARDER CHUNKS OF WORK
  1. [ ] Depression model fits for 240, 242
  2. [ ] Inhibition/Excitiation model
  4. [ ] GMM without slow EM step:
	 For each point, take K nearest neighbors. 
	 Compute 2D gaussian for that point. 
	 Flatten that 2D gaussian and push into SENL's 1D input
  5. [ ] Log Likelihood Fitter: (Any noise model, not just gaussian)
	 MSE is biased towards gaussian noise models, and for real-life data sets the probability tails are always heavier than a gaussian.
	 Subcomponents:
	 - [ ] inter_spike_intervals computation module
         - [ ] bayesian_likelihood() perf metric module
  6. [ ] ABCD Control Blocks with arbitrary functions (start with 1st and second degree polynomials)
  7. [ ] Use a single wavelet transform in place of downsampling + FIR filter
  8. [ ] Write a crash course guide on using NARF

* DEFERRED
** Stephen's boosting verification
  1. A Shrinking step size is stupid simple. Is there a better way?
  2. Can we retire the analysis/TSP files?
  3. Can I retire the modules/exp_filter? 

* DISCARDED WORK
  1. [ ] Push all existing files into the database
  2. [ ] MODULE INIT: Make a module which has a complex init process
	 1) Creates a spanning filterbank of gammatones
	 2) Trains the FIR filter on that spanning filterbank
	 3) Picks the top N (Usually 1, 2 or 3) filters based on their power
	 4) Crops all other filters
  3. [ ] FIX POTENTIAL SOURCE OF BUGS: Not all files have a META.batch property (for 240 and 242)
  4. [ ] A histogram heat map of model performance for each cell so you can see distribution of model performance (not needed now that I have cumulative dist plotter)
  5. [ ] If empty test set is given for a cellid, what should we do? Hold 1 out cross validation? 
  6. [ ] Fix EM conditioning error and get gmm4 started again (Not sure how to fix!)
  7. [ ] Address question: Does variation in neural fuction in A1 follow a continuum, or are there visible clusters?
  8. [ ] A 2D sparse bayes approach. Make a 2D matrix with constant shape (elliptical, based on local deviation of N nearest points) to make representative gaussians, then flatten to 1D to make basis vectors fed through SB.
  9. [ ] CLEAN: Compare_models needs to sort based on training score if test_score doesn't exist.
  10. [ ] FITTER: Regularized boosting fitter
  11. [ ] FITTER: Automatic Relevancy Determination (ARD) + Automatic Smoothness Determination (ASD)
  12. [ ] FITTER: A stronger shrinkage fitter (Shrink by as much as you want).
  13. [ ] FITTER: Three-step fitter (First FIR, then NL, then both together).
  14. [ ] FITTER: Multi-step sparseness fitters (Fit, sparseify, fit, sparsify, etc). Waste of time
  15. [ ] MODULE: Make a faster IIR filter with asymmetric response properties 
  16. [ ] Make logging work for the GUI by including the log space in narf_modelpane?
  17. [ ] IRRITATION: Why doesn't 'nonlinearity' module default to a sigmoid with reasonable parameters?
  18. [ ] IRRITATION: Why isn't there progress in the GUI when fitting?
  19. [ ] IRRITATION: Why isn't there an 'undo' function?
  20. [ ] IRRITATION: Why can't I edit a module type in the middle of the stack via the GUI?
  21. [ ] Right now, you can only instantiate a single GUI at a time. Could this be avoided and the design made more general?	  
	  To do this, instead of a _global_ STACK and XXX, they would be closed-over by the GUI object.
	  Then, there would need to be a 'update-gui' function which can use those closed over variables.
	  That fn could be called whenever you want to programmatically update it. 	  	  	 
  22. [ ] Make gui plot functions response have two dropdowns to pick out colorbar thresholds for easier visualization?
  23. [ ] Make it so baphy can be run _twice_, so that raw_stim_fs can be two different values (load envelope and wav data simultaneously)
  24. [ ] MODULE: Add a filter that processess phase information from a stimulus, not just the magnitude
  25. [ ] Write a function which swaps out the STACK into the BACKGROUND so you can 'hold' a model as a reference and play around with other settings, and see the results graphically by switching back and forth.
  26. [ ] Try adding informative color to histograms and scatter plots
  27. [ ] Try improving contrast of various intensity plots
  28. [ ] Put a Button on the performance metric that launches an external figure if more plot space is needed.
  29. [ ] Add a GUI button to load_stim_from_baphy to play the stimulus as a sound
  30. [ ] FITTER: Crop N% out fitter:
	    1) quickfits FIR
	    2) then quickfits NL
	    3) measures distance from NL line, marks the N worst points
	    4) Looks them up by original indexes (before the sort and row averaging)
	    5) Inverts nonlinearity numerically to find input
	    6) Deconvolves FIR to find the spike that was bad
	    7) Deletes that bad spike from the data
	    8) Starts again with a shrinkage fitter that fits both together
  31. [ ] Expressing NL smoothness regularizer as a matrix
	    A Tikhonov matrix for regression: 
	    diagonals are variance of each coef.
	    2nd diagonals would add some correlation from one FIR coef to the next (smoothness?).
  32. [ ] Sparsity check:
	   For each model,
              for 1:num coefs
               Prune the least important coef
		plot performance
              Make a plot of the #coefs vs performance
  33. [ ] A check of NL homoskedasticity (How much is the variance changing along the abscissa)	     
  34. [ ] FITTER: SWARM. Hybrid fit routine which takes the top N% of models, scales all FIR powers to be the same, then shrinks them.
  35. [ ] Get a histogram of the error of the NL. (Is it Gaussian or something else?)
  36. [ ] Have a display of the Pareto front (Dominating models with better r^2 or whatever)
  37. [ ] FN: Searches for unattached model and image files and deletes them
  38. [ ] Models need associated 'summarize' methods in META
	  Why: Need to extract comparable info despite STACK positional differences in model structure.
	  Why: Need a general interface to plot model summaries for wildly different models
	  Difficulty: Auto-generated models will need some intelligence as to how to generate summarize methods for themselves
  39. [ ] DB Bug Catcher which verifies that every model file in /auto/data/code is in the DB, and correct
	  Why: Somebody could easily put the DB and filesystem out of sync.
	  Why: image files could get deleted
	  Why: DB table could get corrupted
	  Why: Also, we need to periodically re-run the analysis/batch_240.m type scripts to make sure they are all generated and current
  40. [ ] Put a line in fit_single_model that pulls the latest GIT code before fitting?
  41. Fit combo: revcorr->boost (what we do now)
  42. Fit combo: revcorr->boost->sparsify->boost   (Force sparsity and re-boost)
  43. Fit combo: prior->boost
  44. Fit combo: revcorr->boost_with_increasing_sparsity_penalty
  45. Fit combo: revcorr->boost_with_decreasing_sparsity_penalty
  46. Fit combo: zero->boost 
  47. Fit combo: Fit at 100hz, then use that to init a fit at 200Hz, then again at 400Hz.
  48. Replace my nargin checks with "if ~exist('BLAH','var'),"
  48. sf=sf{1}; should be eliminated IN EVERY SINGLE FILE! 
