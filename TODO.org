* Topics for Stephen
  1. [ ] Need a shrinkage tutorial and mathematics
  2. [ ] Need to start using your distributed computation system
  
* NEW FEATURES
  1. [X] Try fitting FIR filter before nl, then both, and compare
  2. [X] Make find_module return ALL modules found, in case there are multiple FIR or multiple nonlinearities
  3. [ ] Collapse models vertically, 
  4. [ ] Function to save top five models as PNGs
	 set(gcf, 'Position', [100 100 500 500], 'Color', 'w')
	 x=0:0.01:10;
	 plot(x, sin(x))
	 set(gca, 'FontSize, 20, 'FontName', 'Arial')
	 export_fig 'strip-diff-far-forward.png' -painters -nocrop
  5. [ ] Refactor plot_saved_analysis
	 1) [ ] Break out second part of performance plotting into a second function and make it return avg curves in case you want to  display test/train performance curves on the same plot
  6. [ ] Refactor test_likely_candidates
	 1) [ ] Models to test should be specified as an argument
	 2) [ ] The recording of various data should also be specified as a separate function so it can be called by 'recache_analysis'
	 3) [ ] Function to rebuild cached values (save cached values in XXX{1})
	 4) [ ] Save the best models in /auto/data
  7. [ ] ARCHITECTURE: Fitting routines need to become generalized fns that are given models and sit in the 'fitters' directory
	 In test_likely_candidates, all of the functions in 'fitters' are called, and the best parameter set for each model is stored
  8. [ ] Function which applies a fn to every saved model file
  9. [ ] Function to use analysis to rank models for each cell file.
  10. [ ] Function to rebuild analysis caches from saved things. 
  11. [ ] Function to plot top 5 10% chunks of values
  12. [ ] Function to select and display top N best models for each cell
  13. [ ] Function to save model performance graphs to disk as PNG
  14. [ ] Function to verify that saved model and cached performance models actually match (failures could signal a bug in my saving code)
  15. [ ] Function to 'set_module_field' (finds module, sets field, so you can mess with things later in scripts)
  16. [ ] Function to record the GIT commit when the model was trained.
  17. [ ] FITTER: Simulated annealing
  18. [ ] FITTER: Shrinkage Fitter	 
  19. [ ] FITTER: nlinfit() (maybe we don't know the stim as well as we think)
  20. [ ] FITTER: Boosting() 
  21. [ ] FITTER: Conjugate boosting' algorithm, which takes steps in a single direction until the objective function stops improving.
  22. [ ] FITTER: Import fitting routines from STRFlab
  23. [ ] PERF METRIC: inter_spike_intervals + bayesian_likelihood()
  24. [ ] MODULE: Build a non-cheating model which extracts envelopes directly from the WAV files using an elliptic or gammatone prefilter
  25. [ ] MODULE: Make a faster IIR filter with asymmetric response properties 
  26. [ ] MODULE: Make Concat Second Order Terms work for any higher order nchoosek type stuff
  27. [ ] MODULE: Standardized single/multi channel gammatone filter
  28. [ ] MODULE: Standardized single/multi channel elliptic filter 
  29. [ ] MODULE FN: Provide functions to cover the input space logarithmically with filters
  30. [ ] MODULE FN: Provide an auto-init for the filters which cover the input space, train filters on that, and picks the channel with the most power. It does this once wide, then once narrow.
  31. [ ] MODULE: Add a module which can pick out a particular dimension from a vector and give it a name as a signal

* END USER CONVENIENCES
  1. [ ] Why isn't auto recalc the default?
  2. [ ] Make logging work for the GUI by including the log space in narf_modelpane?
  3. [ ] IRRITATION: Why doesn't 'nonlinearity' module default to a sigmoid with reasonable parameters?
  4. [ ] IRRITATION: Why doesn't it show the model save filename so I can see which file I just loaded if I forgot?
  5. [ ] IRRITATION: Why doesn't every plotted signal have a legend?
  6. [ ] IRRITATION: Why don't the X (or at least the Y) axes have scales?
  7. [ ] IRRITATION: Why isn't there an 'undo' function?
  8. [ ] IRRITATION: Why can't I resize windows?
  9. [ ] IRRITATION: Why isn't there progress in the GUI when fitting?
  10. [ ] IRRITATION: Why are the editable text boxes so damn small?
  11. [ ] IRRITATION: Why can't I edit a module type in the middle of the stack via the GUI?
  12. [ ] Write a crash course guide on using NARF

* BUG FIXES AND CLEANING
  1) [ ] Make the list of models a global, so I don't have it scattered around everywhere in my code.
  2) [ ] Many repeated blocks of code have evolved and need to be destroyed.
  3) [ ] Paths have become a bit messy: grep for NARF_PATH and correct (also: replace with filesep when possible)
  4) [ ] Names probably could use some rethinking as well, especially defaults (like using 'stim' default even in the fitting algorithms, for example)
  5) [ ] Move the 'gui' stuff to a separate global structure?
  6) [ ] Cleaner way of building models in a script than accessing by index number?
  7) [ ] Look for obvious repetition and make some more functions in util/
  8) [ ] Remove/rename useless functions in util that have accumulated.
  9) [ ] In retrospect, 'plot_gui' stuff probably shouldn't be stored in the XXX or STACK structures...should it be in a 3rd structure?
  10) [ ] It's not quite right to have the 'replot' command be part of the the 'plot_popup fn callback'. Needs to be re-thought.
  11) [ ] Right now, you can only instantiate a single GUI at a time. Could this be avoided and the design made more general?
  12) [ ] Go through the TODO's, FIXME's, etc in existing files
  13) [ ] Ensure that no closures of data are being done by methods. Methods should accept the module object as their first argument, not close over anything.
  14) [ ] make anything named 'do_' into a method for use with modules?
  15) [ ] make anything named 'update_' into a function used purely for its side effects
  16) [ ] Add error handling (catch/throw) around EVERY CALL to a user defined function
  17) [ ] Delete the GUI objects whenever you 'apply' since they may need to be recreated?
  18) [ ] Remember to invalidate data BELOW the present point on a table-edit callback... and to update the gui to reflect this!

* DESIGN QUESTIONS TO BRAINSTORM:
  1. [X] How can sane initial conditions for optimization be automatically arrived at without extra script-writing?
	 Auto-initialization of model params is done by allowing modules to update their design based on the data by calling the optional 'auto_init' method.
	 Arg 1 is the STACK, not including the model itself. 
	 Arg 2 is the XXX data input, not including the model's output data itself. 
  2. [X] How can jack-knifing be integrated in to the optimization routine to prevent over-fitting?
	 Split the big long RESP and STIM vectors in fit_with_lsqcurvefit into 10 chunks
	 Take groups of 9 of those chunks, run lsqcurvefit, then test on remaining chunk
	 Take weighted average of all jackknifed solutions, weighting each by inverse variance? Or just mean, if we assume they all have same variance.
	 Return weighted average.
  3. [X] How should optimization constraints be incorporated in the design?
	 Probably the easiest way is to define a structure which may be used by pack/unpack to create upper and lower bounds, which are then passed to the optimization routine
	 opt_hints = struct('alpha', [-1 3], 'beta', [0 inf]); % Constrain alpha from -1 to 3 and beta from 0 to infinity. 
  4. [X] How should models be automatically generated in a quick and scriptable way?
	 See analysis/test_likely_candidates.m
  5. [X] How can design internal degrees of freedom be detected and corrected during optimization?
	 (Probably they cannot!)
  6. [ ] IF we only have one data file, how can we hold out some fraction of the stimuli so that we can to training/test on a single data file?
  7. [ ] It is awkward in non-parametric non-linearity module to recalc the phi every time you need it. Some place to cache it would be good. 
  8. [ ] There is no best fitting routine, only fitting routines which work better for different cells
  9. [ ] Can jackknifing or the equivalent be applied to ANY fitting routine as a higher level function?
	  
* LUXURY, UNESSENTIAL TODO ITEMS 
  - [ ] Make it so baphy can be run _twice_, so that raw_stim_fs can be two different values (load envelope and wav data simultaneously)
  - [ ] Make gui plot functions response have two dropdowns to pick out colorbar thresholds for easier visualization?
  - [ ] MODULE: Add a filter that processess phase information from a stimulus, not just the magnitude
  - [ ] Write a function which swaps out the STACK into the BACKGROUND so you can 'hold' a model as a reference and play around with other settings, and see the results graphically by switching back and forth.
  - [ ] Write dbchoosecellfiles() and connect it to NARF_MODELPANE
  - [ ] Try adding informative color to histograms and scatter plots
  - [ ] Try improving contrast of various intensity plots
  - [ ] Put a Button on the performance metric that launches an external figure if more plot space is needed.
  - [ ] Add a GUI button to load_stim_from_baphy to play the stimulus as a sound
