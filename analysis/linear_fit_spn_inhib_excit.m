function linear_fit_spn_inhib_excit(cellid, training_set)
% Fits an inhibition_excitation model with polynomial nonlinearities:
%
%             /---> FIR ---> RAMP FN ----> POLYNOMIAL --\
%  SIGNAL ---<                                          (+)---> OUTPUT
%             \---> FIR ---> RAMP FN ----> POLYNOMIAL --/
%

global NARF_PATH STACK XXX;
mdls = scan_directory_for_modules([NARF_PATH filesep 'modules/']);

XXX = {};
XXX{1} = [];
XXX{1}.cellid = cellid;
XXX{1}.training_set = training_set;
XXX{1}.test_set = {};

raster_fs = 200;
filter_length = 20;
n_channels = 2;

STACK = {};
STACK{1} = mdls.load_stim_resps_from_baphy.mdl(...
                struct('raw_resp_fs', raster_fs, ...
                       'raw_stim_fs', raster_fs,...
                       'stimulus_format','envelope', ...
                       'stimulus_channel_count', n_channels));
STACK{2} = mdls.normalize_channels;
STACK{3} = mdls.fir_filter.mdl(...
                struct('num_dims', n_channels, ...
                       'num_coefs', filter_length, ...
		       'output', 'inhib'));
STACK{4} = mdls.fir_filter.mdl(...
                struct('num_dims', n_channels, ...
                       'num_coefs', filter_length, ...
		       'output', 'excit'));
STACK{5} = mdls.nonlinearity.mdl(struct('input', 'inhib', ...
					'output', 'inhib', ...
					'phi', [1 0], ...
                                        'nlfn', @(phi, z) (z + phi(2)) .* phi(1) .* heaviside(z + phi(2)))));

STACK{6} = mdls.nonlinearity.mdl(struct('input', 'excit', ...
					'output', 'excit', ...
					'phi', [1 0], ...
                                        'nlfn', @(phi, z) (z + phi(2)) .* phi(1) .* heaviside(z + phi(2)))));

STACK{7} = mdls.nonlinearity.mdl(struct('input', 'inhib', ...
					'output', 'inhib', ...
					'phi', [1 1 1 1], ...
                                        'nlfn', @polyval));

STACK{8} = mdls.nonlinearity.mdl(struct('input', 'excit', ...
					'output', 'excit', ...
					'phi', [1 1 1 1], ...
                                        'nlfn', @polyval));

STACK{9} = mdls.sumfields.mdl(struct('inputs', {{'inhib', 'excit'}}, ...
					   'output', 'stim', ...));			   

recalc_xxx(1);

STACK{3}.fit_fields = {'coefs'};
STACK{4}.fit_fields = {'coefs'};
STACK{7}.fit_fields = {'phi'};
STACK{8}.fit_fields = {'phi'};

fit_with_lsqcurvefit();

STACK{10} = mdls.mean_squared_error;
STACK{11} = mdls.correlation;

recalc_xxx(3); 
